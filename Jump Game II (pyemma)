// This problem is only a simple BFS problem
public class JumpGameII {
	public static int jump(int[] A) {
		int n = A.length;
		if(n == 1) return 0; // Corner case
		n = n - 1;
		int head = 0, tail = A[0], cnt = 0;
		// head < tail is not necessary in this problem since it guarantee
		// that there exist a solution, however, in othter case, without this
		// check, the loop migth be infinity like [1, 0, 2]
		while(head < tail && tail < n) {
			cnt += 1;
			int temp = 0;
			for(int i = head; i <= tail; i++) {
				temp = Math.max(temp, i + A[i]);
			}
			head = tail;
			tail = temp;
		}
		return cnt+1;
	}
}
