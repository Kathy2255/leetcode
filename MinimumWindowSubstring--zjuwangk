#include <fstream>
#include <vector>
#include <string>
#include <iostream>
#include <unordered_set>
#include <unordered_map>
#include "gadget.h"
using namespace std;

//2014-8-7
class Solution {
	struct ListNode
	{
		int val;
		ListNode *last, *next;
		ListNode(int val): val(val), last(NULL), next(NULL){}
	};
public:
    string minWindow(string S, string T) {
		unordered_map<char, int> Tcount;
		unordered_map<char, int>::iterator it;

		for(int i=0;i<T.size();i++)
		{
			it = Tcount.find(T[i]);
			if(it== Tcount.end()) Tcount.insert(make_pair(T[i],1));
			else it->second++;
		}

		ListNode *head=NULL, *tail=NULL;
		int count=0;
		unordered_map<char,vector<ListNode*>> mapList;
		unordered_map<char,vector<ListNode*>>::iterator mapListIter;
		for(int i=0;i<S.size() && count<Tcount.size();i++)
		{
			it = Tcount.find(S[i]);
			if(it != Tcount.end())
			{
				ListNode *p = new ListNode(i);
				if(tail == NULL)
					head = tail = p;
				else
				{
					tail->next = p;
					p->last = tail;
					tail = tail->next;
				}

				int charCount = it->second;
				mapListIter = mapList.find(S[i]);
				if(mapListIter == mapList.end())
				{
					vector<ListNode*> v;
					v.push_back(p);
					mapList.insert(make_pair(S[i],v));
					if(1 == charCount)
						count++;
				}
				else
				{
					mapListIter->second.push_back(p);
					if(mapListIter->second.size() == charCount)
						count++;
					else if(mapListIter->second.size() == charCount + 1)
					{
						vector<ListNode*> &v = mapListIter->second;
						//erase v[0] and update the list
						if(v[0]->last!=NULL)
							v[0]->last->next=v[0]->next;
						else//head
						{
							head = v[0]->next;
						}
						if(v[0]->next!=NULL)
							v[0]->next->last=v[0]->last;
						delete(v[0]);
						v.erase(v.begin());
					}
				}
			}
		}
		if(count < Tcount.size())
			return "";
		int _end = tail->val;
		int _start = head->val;
		for(int i=_end+1; i<S.size(); i++)
		{
			it = Tcount.find(S[i]);
			if(it != Tcount.end())
			{
				ListNode *p = new ListNode(i);
				tail->next = p;
				p->last = tail;
				tail = tail->next;
				
				mapListIter = mapList.find(S[i]);
				mapListIter->second.push_back(p);

				vector<ListNode*> &v = mapListIter->second;
				if(v[0]->last!=NULL)
					v[0]->last->next=v[0]->next;
				else//head
				{
					head = v[0]->next;
					if(tail->val - head->val < _end - _start)
					{
						_start = head->val;
						_end = tail->val;
					}
				}
				if(v[0]->next!=NULL)
					v[0]->next->last=v[0]->last;
				delete(v[0]);
				v.erase(v.begin());
			}
		}

		return S.substr(_start, _end - _start + 1);
	}
};

int main(void)
{
	vector<string> resVec = prepData("testData/MinimumWindowSubstring.data", ',');
	Solution sn;
	string S = resVec[0];
	string T = resVec[1];
	string res = sn.minWindow(S, T);
	/*
	vector<int> v;
	v.push_back(11);
	v.push_back(22);
	vector<int>::iterator it = v.end()-1;
	int res = *(it);
	v.erase(v.begin()+1);
	*/
	return 0;
}
