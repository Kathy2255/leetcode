public class Solution {
    public ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
        ArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();
        
        if(num.length == 0) {
            list.add(new ArrayList<Integer>());
            return list;
        }
        
        DFS(0,num,list);
        
        return list;      
    }
    public void DFS(int i, int[] num, ArrayList<ArrayList<Integer>> list) {
        if(i == num.length) {
            ArrayList<Integer> in = new ArrayList<Integer>(); 
            for(int k = 0; k < num.length; k++) {
                in.add(num[k]);
            }
            list.add(in);
        }
        
        for(int j = i; j < num.length; j++) {
            if(isSwap(num,i,j) == true) {
                swap(num,i,j);
                DFS(i+1,num,list);
                swap(num,i,j);
            }
        }
    }
    public boolean isSwap(int[] num, int i, int j) {
        int temp = i;
        while(num[temp] != num[j] && temp < j) temp++;
        if(temp == j) return true;
        return false;
    }
    public void swap(int[] num, int i, int j) {
        int temp = num[i];
        num[i] = num[j];
        num[j] = temp;
    }
}
