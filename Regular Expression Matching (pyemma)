// The first method is based on recursion and is relatively easy to understand, the second one
// is based on dp and is relatively hard

public class RegularExpressionMatching {
	public static boolean isMatch1(String s, String p) {
		if(p.length() == 0) return s.length() == 0; // Matching end

		// The second character is '*', we need to test all kinds of match situtation
		if(p.length() > 1 && p.charAt(1) == '*') {
			// The while loop while test of kind of match until the condition is damaged
			while(s.length() > 0 && (s.charAt(0) == p.charAt(0) || p.charAt(0) == '.')) {
				if(isMatch(s, p.substring(2)) == true) return true; // Match zero character
				s = s.substring(1); // Match one character
			}
			return isMatch(s, p.substring(2));
		}
		else {
			// When there is no '*', the first character must match and the substring must match
			// Pay attention to test the length of s since it might be zero
			return (s.length() > 0 && (s.charAt(0) == p.charAt(0) || p.charAt(0) == '.')) && isMatch(s.substring(1), p.substring(1));
		}
	}

	public static boolean isMatch(String s, String p) {
		int m = s.length();
		int n = p.length();
		boolean[][] dp = new boolean[m+1][n+1];

		for(int i = 0; i <= m; i++) {
			for(int j = 0; j <= n; j++) {
				if(i == 0 && j == 0) dp[i][j] = true; // Base case
				else if(i == 0 && j != 0) {
					if(p.charAt(j-1) == '*') dp[i][j] = dp[i][j-2]; // '*' could match empty string
					else dp[i][j] = false;
				}
				else if(i != 0 && j == 0) dp[i][j] = false;
				else {
					if(p.charAt(j-1) == '*') {
						if(p.charAt(j-2) == s.charAt(i-1) || p.charAt(j-2) == '.')
							// Here is the most tricky parts, dp[i][j-2] means we use zero '*', which is an empty string
							// dp[i][j-1] means we use one '*', dp[i-1][j-1] means we use '*' to stands for an additional 
							// character, dp[i-1][j] means we use '*' to match more than two characters, it's very hard to 
							// understand this part
							dp[i][j] = dp[i][j-2] || dp[i][j-1] || dp[i-1][j] || dp[i-1][j-1];
						else
							// If '*' could not match, it could only give a empty string
							dp[i][j] = dp[i][j-2];
					}
					// if first character match or the pattern's first is '.', look at [i-1][j-1] to check if they could match
					else if(p.charAt(j-1) == '.' || s.charAt(i-1) == p.charAt(j-1)) dp[i][j] = dp[i-1][j-1];
					else dp[i][j] = false;
				}
			}
		}
		return dp[m][n];
	}

	public static void main(String[] args) {
		System.out.println(isMatch("aa", "a"));
		System.out.println(isMatch("aa", "aa"));
		System.out.println(isMatch("aaa", "aa"));
		System.out.println(isMatch("aa", "a*"));
		System.out.println(isMatch("aa", ".*"));
		System.out.println(isMatch("ab", "ab*"));
		System.out.println(isMatch("aab", "c*a*b"));
	}
}
