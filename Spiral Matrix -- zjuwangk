#include <fstream>
#include <vector>
#include <string>
#include <iostream>
#include "gadget.h"
using namespace std;

//2014-8-15
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int> > &matrix) {
        vector<int> res;
		if(matrix.size() <= 0)
			return res;
		int h = matrix.size();
		if(matrix[0].size() <= 0)
			return res;
		int w = matrix[0].size();
		res.push_back(matrix[0][0]);
		int layer = 1;
		int x = 0;
		int y = 0;
		char dir = 'R';
		for(int i=1; i<w*h; i++)
		{
			switch(dir)
			{
			case 'R':
				if(y<w - layer)
					y++;
				else
				{
					x++;
					dir = 'D';
				}
				break;
			case 'D':
				if(x<h-layer)
					x++;
				else
				{
					y--;
					dir = 'L';
				}
				break;
			case 'L':
				if(y>layer-1)
					y--;
				else
				{
					x--;
					dir = 'U';
				}
				break;
			case 'U':
				if(x>layer)
					x--;
				else//x==layer
				{
					layer++;
					y++;
					dir = 'R';
				}
				break;
			default:
				break;
			}
			res.push_back(matrix[x][y]);
		}
		return res;
    }
};

int main(void)
{
	//vector<string> resVec = prepData("testData/FILE_NAME.data", ',');
	Solution sn;
	int arr[][4] = {
		{1,2,3,4},
		{5,6,7,8},
		{9,10,11,12},
		{13,14,15,16}
	};
	vector<vector<int>> vv;
	for(int i=0;i<sizeof(arr)/sizeof(arr[0]);i++)
	{
		vector<int> v;
		for(int j=0;j<sizeof(arr[i])/sizeof(arr[i][0]);j++)
			v.push_back(arr[i][j]);
		vv.push_back(v);
	}
	sn.spiralOrder(vv);
	return 0;
}
