public class SudokuSolver {
	public void solveSudoku(char[][] board) {
		dfs(board, 0, 0);
	}

	private boolean checker(char[][] board, char key, int x, int y) {
		int m = board.length;
		int n = board[0].length;
		for(int i = 0; i < m; i++) 
			if(board[i][y] == key)
				return false;
		for(int i = 0; i < n; i++)
			if(board[x][i] == key)
				return false;
		for(int i = (x/3)*3; i < (x/3+1)*3; i++) {
			for(int j = (y/3)*3; j < (y/3+1)*3; j++) {
				if(board[i][j] == key)
					return false;
			}
		}
		return true;
	}

	private boolean dfs(char[][] board, int x, int y) {
		if(x == board.length) return true;
		else if(y == board[0].length) return dfs(board, x+1, 0);
		else {
			if(board[x][y] != '.') return dfs(board, x, y+1);
			else {
				boolean stat = false;
				for(char key = '1'; key <= '9'; key++) {
					if(checker(board, key, x, y) == true) {
						board[x][y] = key;
						stat = dfs(board, x, y+1);
						if(stat == true) return stat;
						board[x][y]  = '.';
					}
				}
				return stat;
			}
		}
	}
}
