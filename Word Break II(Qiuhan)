class Solution {
private:
	void gen_path(string &s, const vector<vector<bool> >&breakpos, int cur, vector<string>&path, vector<string>& result){
		if(cur==0){
			string temp="";
			for(int i=path.size()-1;i>0;i--){
				temp+=path[i];
				temp+=" ";
			}
			temp+=path[0];
			result.push_back(temp);
		}
		for(int i=0;i<s.length();++i){
			if(breakpos[cur][i]){
				path.push_back(s.substr(i,cur-i));
				gen_path(s,breakpos,i,path,result);
				path.pop_back();
			}
		}
	}
public:
    vector<string> wordBreak(string s, unordered_set<string> &dict) {
        string temp;
		bool* flag=new bool[s.length()+1];
		vector<string>res;
		if(dict.size()==0){
			return res;
		}
		int len=s.length();
		vector<vector<bool> > breakpos(len + 1, vector<bool>(len));
		flag[0]=true;
		for(int i=1;i<=s.length();++i){
			for(int j=i-1;j>=0;--j){
				temp=s.substr(j,i-j);
				if(dict.find(temp)!=dict.end()&&flag[j]==true){
					flag[i]=true;
					breakpos[i][j]=true;
					
				}
			
			}
		}
		vector<string>path;
		gen_path(s,breakpos,s.length(),path,res);
		return res;
    }
};
