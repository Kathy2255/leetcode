class Solution {
public:
    TreeNode *sortedListToBST(ListNode *head) {
		//二分查找树即为平衡的BST
		int count=0;
		ListNode*temp=head;
		while(temp!=NULL){
			temp=temp->next;
			count++;
		}
		return sortedListToBST(head,0,count-1);
        
    }
	TreeNode* sortedListToBST(ListNode *& list, int start, int end) {
		if (start > end) return NULL;
		// same as (start+end)/2, avoids overflow
		int mid = start + (end - start) / 2;
		TreeNode *leftChild = sortedListToBST(list, start, mid-1);
		TreeNode *parent = new TreeNode(list->val);
		parent->left = leftChild;
		list = list->next;
		parent->right = sortedListToBST(list, mid+1, end);
		return parent;
	}
};
