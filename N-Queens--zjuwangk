//2014-8-18
class Solution {
	vector<string> board;
	vector<vector<string>> resVec;
	vector<unordered_set<int>> taken;//0:column 1:i+j 2:i-j

	void DFS(int depth, int n)
	{
		for(int i=0;i<n;i++)
		{
			if(taken[0].find(i) != taken[0].end()
			|| taken[1].find(depth+i) != taken[1].end()
			|| taken[2].find(depth-i) != taken[2].end()
			)
				continue;

			taken[0].insert(i);
			taken[1].insert(depth+i);
			taken[2].insert(depth-i);
			board[depth][i] = 'Q';

			if(depth == n-1)
				resVec.push_back(board);
			else
				DFS(depth+1, n);

			board[depth][i]='.';
			taken[0].erase(i);
			taken[1].erase(depth+i);
			taken[2].erase(depth-i);
		}
	}
public:
    vector<vector<string> > solveNQueens(int n) {
		string s = "";
		for(int i=0;i<n;i++) s+='.';
		for(int i=0;i<n;i++) board.push_back(s);
		
		for(int i=0;i<3;i++)
			taken.push_back(unordered_set<int>());
		
		DFS(0,n);

		return this->resVec;
    }
};
