class Solution {
private:
    struct Node{
        int x;
        int y;
        Node(int x,int y):x(x),y(y){}
    };
    int col;
    int row;
    queue<Node>q;
	void addqueue(int x,int y,vector<vector<char>> &board){
		if(x>=0&&x<row&&y>=0&&y<col && board[x][y]=='O'){
			q.push(Node(x,y));
		}
		
	}
public:
    void solve(vector<vector<char>> &board) {
        row=board.size();
        if(row==0){
            return;
        }
		col=board[0].size();
		if(col==0){
		    return;
		}
		for(int i=0;i<row;i++){
			addqueue(i,0,board);
			addqueue(i,col-1,board);
		}
		for(int i=0;i<col;i++){
			addqueue(0,i,board);
			addqueue(row-1,i,board);
		}
		while(q.size()>0){
			Node temp=q.front();
			q.pop();
			if(board[temp.x][temp.y]=='O'){
				board[temp.x][temp.y]='A';
			}
			addqueue(temp.x-1,temp.y,board);
			addqueue(temp.x+1,temp.y,board);
			addqueue(temp.x,temp.y-1,board);
			addqueue(temp.x,temp.y+1,board);
			
		}
		for(int i=0;i<row;i++){
			for(int j=0;j<col;j++){
				if(board[i][j]=='A'){
					board[i][j]='O';
				}
				else if(board[i][j]=='O'){
					board[i][j]='X';
				}
			}
		}
    }

};
