public class PalindromePartitionII {
	public static int minCut(String s) {
		int n = s.length();
		if(n == 0) return 0;
		boolean[][] dp = new boolean[n][n];
		// use dp to find all possible palindrome, dp[i][j] indicates whether the
		// substring s.substring(i, j+1) is a palindrome or not
		for(int i = n-1; i >= 0; i--) {
			for(int j = i; j < n; j++) {
				// base of odd length
				if(i == j) dp[i][j] = true;
				// base of odd length
				else if(j == i+1) {
					if(s.charAt(j) == s.charAt(i)) dp[i][j] = true;
					else dp[i][j] = false;
				}
				else {
					if(dp[i+1][j-1] == true && s.charAt(j) == s.charAt(i)) dp[i][j] = true;
					else dp[i][j] = false;
				}
			}
		}
		// use dp to find the min cut, the same idea as word break, dp[i]
		// record the min cut required by the substring s.substring(0, i+1)
		int[] cut = new int[n]; cut[0] = 0;
		for(int i = 1; i < n; i++) {
			if(dp[0][i] == true) cut[i] = 0;
			else {
				int mi = 0xFFFFFF;
				for(int j = 1; j <= i; j++) {
					if(dp[j][i] == true) mi = Math.min(mi, cut[j-1]+1);
				}
				cut[i] = mi;
			}
		}

		return cut[n-1];
	}

	public static void main(String[] args) {
		System.out.println(minCut("abcd"));
	}
}
