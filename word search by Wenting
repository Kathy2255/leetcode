class Solution {
public:
    bool helper(vector<vector<char> > &board, vector<vector<bool> > &isVisited, string word, int index, int a, int b){
        if(index >= word.size()){
            return true;
        }
        if(a > 0 && isVisited[a - 1][b] == false && board[a - 1][b] == word[index]){
            isVisited[a - 1][b] = true;
            if(helper(board, isVisited, word, index + 1, a - 1, b) == true){
                    return true;
            }
            isVisited[a - 1][b] = false;
        }
        if(b > 0 && isVisited[a][b - 1] == false && board[a][b - 1] == word[index]){
            isVisited[a][b - 1] = true;
            if(helper(board, isVisited, word, index + 1, a, b - 1) == true){
                    return true;
            }
            isVisited[a][b - 1] = false;
        }
        if(a < board.size() - 1 && isVisited[a + 1][b] == false && board[a + 1][b] == word[index]){
            isVisited[a + 1][b] = true;
            if(helper(board, isVisited, word, index + 1, a + 1, b) == true){
                    return true;
            }
            isVisited[a + 1][b] = false;
        }
        if(b < board[0].size() - 1 && isVisited[a][b + 1] == false && board[a][b + 1] == word[index]){
            isVisited[a][b + 1] = true;
            if(helper(board, isVisited, word, index + 1, a, b + 1) == true){
                    return true;
            }
            isVisited[a][b + 1] = false;
        }
        return false;
        
    }
    bool exist(vector<vector<char> > &board, string word) {
        if(board.empty() || word.length() == 0){
            return true;
        }
        vector<vector<bool> > isVisited;
        for(int i = 0; i < board.size(); i++){
            isVisited.push_back(vector<bool>(board[0].size(), false));
        }
        for(int i = 0; i < board.size(); i++){
            for(int j = 0; j < board[0].size(); j++){
                if(word[0] == board[i][j]){
                    isVisited[i][j] = true;
                    if(helper(board, isVisited, word, 1, i, j) == true){
                        return true;
                    }
                    isVisited[i][j] = false;
                }
                
            }
        }
        return false;
    }
};
